import ballerina/test;
import ballerinax/mysql;

configurable string USER = ?;
configurable string PASSWORD = ?;
configurable string HOST = ?;
configurable string DATABASE = ?;
configurable int PORT = ?;

@test:BeforeSuite
function truncate() returns error? {
    mysql:Client dbClient = check new (host = HOST, user = USER, password = PASSWORD, database = DATABASE, port = PORT);
    _ = check dbClient->execute(`TRUNCATE MedicalNeeds`);
    _ = check dbClient->execute(`TRUNCATE MedicalItems`);
    check dbClient.close();
}

@test:Config {
    groups: ["basic"]
}
function testCreate() returns error? {
    MedicalItemClient miClient = check new();
    MedicalItem item = {
        itemId: 1,
        name: "item name",
        'type: "item type",
        unit: "ml"
    };
    int? id = check miClient->create(item);
    check miClient.close();
    test:assertTrue(id is int);
}

@test:Config {
    groups: ["basic"]
}
function testCreateWithAutogeneratedKey() returns error? {
    MedicalNeedClient mnClient = check new();
    int? id = check mnClient->create({
        itemId: 1,
        beneficiaryId: 1,
        period: { year: 2022, month: 10, day: 10, hour: 1, minute: 2, second: 3 },
        urgency: "URGENT",
        quantity: 5
    });
    check mnClient.close();
    test:assertTrue(id is int);
}

@test:Config {
    groups: ["basic"],
    dependsOn: [testCreate]
}
function testReadByKey() returns error? {
    MedicalItemClient miClient = check new();
    MedicalItem item = check miClient->readByKey(1);
    test:assertEquals(item, {
        itemId: 1,
        name: "item name",
        'type: "item type",
        unit: "ml"        
    });
    check miClient.close();
}

@test:Config {
    groups: ["basic"],
    dependsOn: [testCreate]
}
function testRead1() returns error? {
    MedicalItemClient miClient = check new();
    _ = check miClient->create({
        itemId: 2,
        name: "item2 name",
        'type: "type1",
        unit: "kg"
    });
    _ = check miClient->create({
        itemId: 3,
        name: "item2 name",
        'type: "type2",
        unit: "ml"
    });
    _ = check miClient->create({
        itemId: 4,
        name: "item2 name",
        'type: "type2",
        unit: "kg"
    });

    int count = 0;
    stream<record {}, error?> itemStream = check miClient->read({ 'type: "type1" });
    _ = check from record {} item in itemStream
        do {
            test:assertTrue(item is MedicalItem);
            count = count + 1;
        };
    check miClient.close();
    test:assertEquals(count, 2);
}
